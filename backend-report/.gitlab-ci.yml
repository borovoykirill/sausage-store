variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  SAST_EXCLUDED_ANALYZERS: eslint, nodejs-scan
  ARTIFACT_COMPRESSION_LEVEL: fastest
  CACHE_COMPRESSION_LEVEL: fastest
 
         
stages:
  - build
  - test
  - sonarqube-test
  - release
  - docker-build

include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

build-backend-report:
  stage: build
  cache:
    - key: backend_report
      paths:
        - ${CI_PROJECT_DIR}/.m2/repository/
  script:
    - echo CI_COMMIT_REF_SLUG $CI_COMMIT_REF_SLUG
    - echo CI_JOB_ID ${CI_JOB_ID}
    - echo "REPORT_ARTIFACT_JOB_ID=${CI_JOB_ID}" > REPORT_CI_JOB_ID.txt
    - cd ${CI_PROJECT_DIR}/backend-report
    - mvn package -DskipTests -Dversion.application=${VERSION} -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository
    - cd ..
    - mv backend-report/target/sausage-store-report-${VERSION}.jar backend-report/sausage-store-report-${VERSION}.jar
  artifacts:
    paths:
      - backend-report/sausage-store-report-${VERSION}.jar
    expire_in: 2 hrs
    reports: # Сохраняем числовой идентификатор задачи для последующего скачивания и загрузки артефактов на стадии release
      dotenv: REPORT_CI_JOB_ID.txt


spotbugs-sast:
  stage: test
  cache:
    - key: backend_report
      paths:
        - ${CI_PROJECT_DIR}/.m2/repository/
  variables:
    COMPILE: "false"
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  allow_failure: true

sonarcube-backend-report:
  stage: sonarqube-test
  only:
    changes:
      - backend/**/*
  image: maven:3.8-openjdk-16
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache https://docs.sonarqube.org/8.5/analysis/gitlab-cicd/
    SONAR_HOST_URL: "$SONARQUBE_URL"
    SONAR_TOKEN: "$SONARQUBE_BACKEND_ACCESS_TOKEN"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd backend
    - mvn verify sonar:sonar -DskipTests -Dsonar.projectKey="$SONARQUBE_BACKEND_PROJECT_KEY" -Dsonar.projectName="01_STANISLAV_BITKOV_BACKEND"
  when: manual
  allow_failure: true
  
release-backend-report:
  stage: release
  script:
    - echo CI_JOB_TOKEN ${CI_JOB_TOKEN}
    - echo CI_JOB_ID ${CI_JOB_ID}
    - >
      curl --location --output sausage-store-backend-report-${VERSION}.zip -H "PRIVATE-TOKEN: ${SAUSAGE_STORE_PROJECT_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/${REPORT_ARTIFACT_JOB_ID}/artifacts"
    - >
      curl -sSL -H "JOB-TOKEN: ${CI_JOB_TOKEN}" -T sausage-store-backend-report-${VERSION}.zip "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/sausage-store/${CI_COMMIT_SHA}/"

 
# --tag $CI_REGISTRY_IMAGE/sausage-frontend:latest
# - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest
# тэг latest ставится на последнюю версию docker image, но при деплое используется конкретная версия

docker-report-image-build:
  stage: docker-build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend-report
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-report-backend:$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-report-backend:latest
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-report-backend:$VERSION
    - docker push $CI_REGISTRY_IMAGE/sausage-report-backend:latest
